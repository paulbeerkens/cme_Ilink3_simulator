//File generated by CodeGenerator
//Generated from: /home/pbeerkens/source/cme_Ilink3_simulator/data/Cme.Futures.iLink3.Sbe.v8.5.xml

#ifndef CMESIMULATOR_ILINK3_ENUMS_GEN_H
#define CMESIMULATOR_ILINK3_ENUMS_GEN_H
#include <cstdint>

namespace IL3Enum {

enum class AvgPxInd: std::uint8_t{
  NoAveragePricing=0 //No Average Pricing
, TradeispartofanAveragePriceGroupIdentifiedbytheAvgPxGrpID=1 //Trade is part of an Average Price Group Identified by the AvgPxGrp ID
, TradeispartofaNotionalValueAveragePriceGroup=3 //Trade is part of a Notional Value Average Price Group
, Null=255};

enum class BooleanFlag: std::uint8_t{
  False=0 //False, No
, True=1 //True, Yes
};

enum class BooleanNULL: std::uint8_t{
  False=0 //False, No
, True=1 //True, Yes
, Null=255};

enum class ClearingAcctType: std::uint8_t{
  Customer=0 //Customer
, Firm=1 //Firm
, Null=255};

enum class CmtaGiveUpCD: char{
  GiveUp='G' //Give Up
, SGXoffset='S' //SGX offset
, Null=0};

enum class CustOrdHandlInst: char{
  FCMprovidedscreen='C' //FCM provided screen
, Otherprovidedscreen='D' //Other provided screen
, FCMAPIorFIX='G' //FCM API or FIX
, AlgoEngine='H' //Algo Engine
, DeskElectronic='W' //Desk Electronic
, ClientElectronic='Y' //Client Electronic
, Null=0};

enum class CustOrderCapacity: std::uint8_t{
  Membertradingfortheirownaccount=1 //Member trading for their own account
, Clearingfirmtradingforitsproprietaryaccount=2 //Clearing firm trading for its proprietary account
, Membertradingforanothermember=3 //Member trading for anothermember
, Allother=4 //All other
, Null=255};

enum class DKReason: char{
  UnknownSecurity='A' //Unknown Security
, WrongSide='B' //Wrong Side
, QuantityExceedsOrder='C' //Quantity Exceeds Order
, NoMatchingOrder='D' //No Matching Order
, PriceExceedsLimit='E' //Price Exceeds Limit
, CalculationDifference='F' //Calculation Difference
, NoMatchingExecutionReport='G' //No Matching Execution Report
, Other='Z' //Other
, Null=0};

enum class ExecAckStatus: std::uint8_t{
  Accepted=1 //Accepted
, Rejected=2 //Rejected
};

enum class ExecMode: char{
  Aggressive='A' //Aggressive
, Passive='P' //Passive
, Null=0};

enum class ExecReason: std::uint8_t{
  MarketExchangeOption=8 //Market Exchange Option
, CancelledNotBest=9 //Cancelled Not Best
, CancelOnDisconnect=100 //Cancel On Disconnect
, SelfMatchPreventionOldestOrderCancelled=103 //Self Match Prevention Oldest Order Cancelled
, CancelOnGlobexCreditControlsViolation=104 //Cancel On Globex Credit Controls Violation
, CancelFromFirmsoft=105 //Cancel From Firmsoft
, CancelFromRiskManagementAPI=106 //Cancel From Risk Management API 
, SelfMatchPreventionNewestOrderCancelled=107 //Self Match Prevention Newest Order Cancelled
, Cancelduetovolquotedoptionorderrestedqtylessthanminordersize=108 //Cancel due to vol quoted option order rested qty less than min order size
, Null=255};

enum class ExecTypTrdCxl: char{
  TradeCorrection='G' //Trade Correction
, TradeCancel='H' //Trade Cancel
};

enum class ExpCycle: std::uint8_t{
  ExpireOnTradingSessionClose=0 //Expire On Trading Session Close
, Expirationatgivendate=2 //Expiration at given date 
, Null=255};

enum class FTI: std::uint8_t{
  Backup=0 //Backup
, Primary=1 //Primary
, Null=255};

enum class KeepAliveLapsed: std::uint8_t{
  NotLapsed=0 //NotLapsed
, Lapsed=1 //Lapsed
};

enum class ListUpdAct: char{
  Add='A' //Add
, Delete='D' //Delete
};

enum class ManualOrdInd: std::uint8_t{
  Automated=0 //Automated
, Manual=1 //Manual
, Null=255};

enum class ManualOrdIndReq: std::uint8_t{
  Automated=0 //Automated
, Manual=1 //Manual
};

enum class MassActionOrdTyp: char{
  Limit='2' //Limit
, StopLimit='4' //Stop Limit
, Null=0};

enum class MassActionResponse: std::uint8_t{
  Rejected=0 //Rejected
, Accepted=1 //Accepted
};

enum class MassActionScope: std::uint8_t{
  Instrument=1 //Instrument
, All=7 //All
, MarketSegmentID=9 //Market Segment ID
, InstrumentGroup=10 //Instrument Group
, QuoteSetID=100 //Quote Set ID
};

enum class MassCancelTIF: std::uint8_t{
  Day=0 //Day
, GoodTillCancel=1 //Good Till Cancel
, GoodTillDate=6 //Good Till Date
, Null=255};

enum class MassCxlReqTyp: std::uint8_t{
  SenderSubID=100 //Sender Sub ID
, Account=101 //Account
, Null=255};

enum class MassStatusOrdTyp: std::uint8_t{
  SenderSubID=100 //SenderSubID
, Account=101 //Account
, Null=255};

enum class MassStatusReqTyp: std::uint8_t{
  Instrument=1 //Instrument
, InstrumentGroup=3 //Instrument Group
, MarketSegment=100 //Market Segment
};

enum class MassStatusTIF: std::uint8_t{
  Day=0 //Day
, GTC=1 //GTC
, GTD=6 //GTD
, Null=255};

enum class OFMOverrideReq: std::uint8_t{
  Disabled=0 //Disabled
, Enabled=1 //Enabled
};

enum class OrdStatusTrd: std::uint8_t{
  PartiallyFilled=1 //Partially Filled
, Filled=2 //Filled
};

enum class OrdStatusTrdCxl: char{
  TradeCorrection='G' //Trade Correction
, TradeCancel='H' //Trade Cancel
};

enum class OrderEventType: std::uint8_t{
  PartiallyFilled=4 //Partially Filled
, Filled=5 //Filled
, Null=255};

enum class OrderStatus: char{
  New='0' //New
, PartiallyFilled='1' //Partially Filled
, Filled='2' //Filled
, Cancelled='4' //Cancelled
, Replaced='5' //Replaced
, Rejected='8' //Rejected
, Expired='C' //Expired
, Undefined='U' //Undefined
};

enum class OrderType: char{
  MarketWithProtection='1' //Market With Protection
, Limit='2' //Limit
, StopLimit='4' //Stop Limit
, MarketWithLeftoverAsLimit='K' //Market With Leftover As Limit
};

enum class OrderTypeReq: char{
  MarketwithProtection='1' //Market with Protection
, Limit='2' //Limit
, StopwithProtection='3' //Stop with Protection
, StopLimit='4' //Stop Limit
, MarketWithLeftoverAsLimit='K' //Market With Leftover As Limit
};

enum class PartyDetailRole: std::uint16_t{
  ExecutingFirm=1 //Executing Firm
, CustomerAccount=24 //Customer Account
, TakeUpFirm=96 //Take Up Firm
, Operator=118 //Operator
, TakeUpAccount=1000 //Take Up Account
};

enum class QuoteAckStatus: std::uint8_t{
  Accepted=0 //Accepted
, Rejected=5 //Rejected
};

enum class QuoteCxlStatus: std::uint8_t{
  CancelperInstrument=1 //Cancel per Instrument
, CancelperInstrumentgroup=3 //Cancel per Instrument group
, Cancelallquotes=4 //Cancel all quotes
, Rejected=5 //Rejected
, CancelperQuoteSet=100 //Cancel per Quote Set
};

enum class QuoteCxlTyp: std::uint8_t{
  CancelperInstrument=1 //Cancel per Instrument
, CancelperInstrumentgroup=3 //Cancel per Instrument group
, Cancelallquotes=4 //Cancel all quotes
, CancelperQuoteSet=100 //Cancel per Quote Set
};

enum class QuoteTyp: std::uint8_t{
  Tradeable=1 //Tradeable
, Null=255};

enum class RFQSide: std::uint8_t{
  Buy=1 //Buy
, Sell=2 //Sell
, Cross=8 //Cross
, Null=255};

enum class ReqResult: std::uint8_t{
  ValidRequest=0 //Valid Request
, NoDataFoundThatMatchedSelectionCriteria=2 //No Data Found That Matched Selection Criteria
, NotAuthorizedtoRetrieveData=3 //Not Authorized to Retrieve Data
, DataTemporarilyUnavailable=4 //Data Temporarily Unavailable
};

enum class SLEDS: std::uint8_t{
  TradeClearingatExecutionPrice=0 //Trade Clearing at Execution Price
, TradeClearingatAlternateClearingPrice=1 //Trade Clearing at Alternate Clearing Price
, Null=255};

enum class SMPI: char{
  CancelNewest='N' //Cancel Newest
, CancelOldest='O' //Cancel Oldest
, Null=0};

enum class SecRspTyp: std::uint8_t{
  AcceptSecurityProposalasis=1 //Accept Security Proposal as is
, AcceptSecurityproposalwithrevisionsasindicatedinthemessage=2 //Accept Security proposal with revisions as indicated in the message
, RejectSecurityProposal=5 //Reject Security Proposal
};

enum class ShortSaleType: std::uint8_t{
  LongSell=0 //Long Sell
, ShortSaleWithNoExemptionSESH=1 //Short Sale With No Exemption SESH
, ShortSaleWithExemptionSSEX=2 //Short Sale With Exemption SSEX
, UndisclosedSellInformationNotAvailableUNDI=3 //Undisclosed Sell Information Not Available UNDI
, Null=255};

enum class SideNULL: std::uint8_t{
  Buy=1 //Buy
, Sell=2 //Sell
, Null=255};

enum class SideReq: std::uint8_t{
  Buy=1 //Buy
, Sell=2 //Sell
};

enum class SideTimeInForce: std::uint8_t{
  Day=0 //Day
, FAK=3 //FAK
};

enum class SplitMsg: std::uint8_t{
  SplitMessageDelayed=0 //Split Message Delayed
, OutofOrderMessageDelayed=1 //Out of Order Message Delayed
, CompleteMessageDelayed=2 //Complete Message Delayed
, Null=255};

enum class TimeInForce: std::uint8_t{
  Day=0 //Day
, GoodTillCancel=1 //Good Till Cancel
, FillAndKill=3 //Fill And Kill
, FillOrKill=4 //Fill Or Kill
, GoodTillDate=6 //Good Till Date
};

enum class TradeAddendum: std::uint8_t{
  PartiallyFilled=4 //Partially Filled
, Filled=5 //Filled
, TradeCancel=100 //Trade Cancel
, TradeCorrection=101 //Trade Correction
};

} //end of namespace IL3Enum
#endif //CMESIMULATOR_ILINK3_ENUMS_GEN_H
